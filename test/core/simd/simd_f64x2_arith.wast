;; Tests for f64x2 arithmetic operations on major boundary values and all special values.


(module
  (func (export "f64x2.add") (param v128 v128) (result v128) (f64x2.add (local.get 0) (local.get 1)))
  (func (export "f64x2.sub") (param v128 v128) (result v128) (f64x2.sub (local.get 0) (local.get 1)))
  (func (export "f64x2.mul") (param v128 v128) (result v128) (f64x2.mul (local.get 0) (local.get 1)))
  (func (export "f64x2.div") (param v128 v128) (result v128) (f64x2.div (local.get 0) (local.get 1)))
  (func (export "f64x2.neg") (param v128) (result v128) (f64x2.neg (local.get 0)))
  (func (export "f64x2.sqrt") (param v128) (result v128) (f64x2.sqrt (local.get 0)))
)

(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1021 0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000001p-1022 0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000001p-1022 0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1021 -0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.fffffffffffffp-1022 -0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.fffffffffffffp-1022 -0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.8000000000000p+0 0x1.8000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.b21fb54442d18p+2 0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.721fb54442d18p+2 -0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.8000000000000p+0 -0x1.8000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.721fb54442d18p+2 0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.b21fb54442d18p+2 -0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.8000000000000p+0 0x1.8000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+1 0x1.0000000000000p+1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.d21fb54442d18p+2 0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.521fb54442d18p+2 -0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.8000000000000p+0 -0x1.8000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+1 -0x1.0000000000000p+1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.521fb54442d18p+2 0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.d21fb54442d18p+2 -0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.b21fb54442d18p+2 0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.721fb54442d18p+2 0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.d21fb54442d18p+2 0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.521fb54442d18p+2 0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+3 0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.721fb54442d18p+2 -0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.b21fb54442d18p+2 -0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.521fb54442d18p+2 -0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.d21fb54442d18p+2 -0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+3 -0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000001p-1022 0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.fffffffffffffp-1022 -0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000002p-1022 0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000002p-1022 0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000001p-1022 0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.fffffffffffffp-1022 -0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000002p-1022 0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000002p-1022 0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 inf inf)))
(assert_return (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.add" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1021 0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.fffffffffffffp-1022 0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.fffffffffffffp-1022 0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1021 -0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000001p-1022 -0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000001p-1022 -0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.8000000000000p+0 0x1.8000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.721fb54442d18p+2 -0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.b21fb54442d18p+2 0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.8000000000000p+0 -0x1.8000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.b21fb54442d18p+2 -0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.721fb54442d18p+2 0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.8000000000000p+0 0x1.8000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+1 0x1.0000000000000p+1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.521fb54442d18p+2 -0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.d21fb54442d18p+2 0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.8000000000000p+0 -0x1.8000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+1 -0x1.0000000000000p+1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.d21fb54442d18p+2 -0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.521fb54442d18p+2 0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.721fb54442d18p+2 0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.b21fb54442d18p+2 0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.521fb54442d18p+2 0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.d21fb54442d18p+2 0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+3 0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.b21fb54442d18p+2 -0x1.b21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.721fb54442d18p+2 -0x1.721fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.d21fb54442d18p+2 -0x1.d21fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.521fb54442d18p+2 -0x1.521fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+3 -0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x0.fffffffffffffp-1022 -0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000001p-1022 0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x0.fffffffffffffp-1022 -0x0.fffffffffffffp-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000001p-1022 0x1.0000000000001p-1022))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 inf inf)))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sub" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.8000000000000p-1022 0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.8000000000000p-1022 -0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p-1020 0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p-1020 -0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1 0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1 -0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x0.8000000000000p-1022 -0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x0.8000000000000p-1022 0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p-1020 -0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p-1020 0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1 -0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1 0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.8000000000000p-1022 0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.8000000000000p-1022 -0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-2 0x1.0000000000000p-2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-2 -0x1.0000000000000p-2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+1 0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+1 -0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1022 0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1022 -0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x0.8000000000000p-1022 -0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x0.8000000000000p-1022 0x0.8000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-2 -0x1.0000000000000p-2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-2 0x1.0000000000000p-2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+1 -0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+1 0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1022 -0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1022 0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p-1020 0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p-1020 -0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.921fb54442d18p+1 0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.921fb54442d18p+1 -0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.3bd3cc9be45dep+5 0x1.3bd3cc9be45dep+5))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.3bd3cc9be45dep+5 -0x1.3bd3cc9be45dep+5))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000006p-1022 0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0000000000006p-1022 0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.921fb54442d18p-1020 -0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.921fb54442d18p-1020 0x1.921fb54442d18p-1020))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.921fb54442d18p+1 -0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.921fb54442d18p+1 0x1.921fb54442d18p+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.3bd3cc9be45dep+5 -0x1.3bd3cc9be45dep+5))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.3bd3cc9be45dep+5 0x1.3bd3cc9be45dep+5))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000006p-1022 -0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000006p-1022 -0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1 0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1 -0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.fffffffffffffp+1022 0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1022 -0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp-51 0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp-51 0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1 -0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.fffffffffffffp+1 0x1.fffffffffffffp+1))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1022 -0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.fffffffffffffp+1022 0x1.fffffffffffffp+1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp-51 -0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.fffffffffffffp-51 -0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0000000000006p-1022 0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0000000000006p-1022 -0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp-51 0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp-51 -0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0000000000006p-1022 0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0000000000006p-1022 -0x0.0000000000006p-1022))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp-51 0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp-51 -0x1.fffffffffffffp-51))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.mul" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1021 0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1021 -0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.28be60db93910p-1022 0x0.28be60db93910p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.28be60db93910p-1022 -0x0.28be60db93910p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+52 0x1.0000000000000p+52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+52 0x1.0000000000000p+52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1021 -0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1021 0x1.0000000000000p-1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.28be60db93910p-1022 -0x0.28be60db93910p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.28be60db93910p-1022 0x0.28be60db93910p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+52 -0x1.0000000000000p+52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+52 -0x1.0000000000000p+52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+1021 0x1.0000000000000p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+1021 -0x1.0000000000000p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.45f306dc9c883p-4 0x1.45f306dc9c883p-4))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.45f306dc9c883p-4 -0x1.45f306dc9c883p-4))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.2000000000000p-1022 0x0.2000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.2000000000000p-1022 -0x0.2000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+1021 -0x1.0000000000000p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+1021 0x1.0000000000000p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.45f306dc9c883p-4 -0x1.45f306dc9c883p-4))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.45f306dc9c883p-4 0x1.45f306dc9c883p-4))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.2000000000000p-1022 -0x0.2000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.2000000000000p-1022 0x0.2000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+1022 0x1.0000000000000p+1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+1022 -0x1.0000000000000p+1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p+1 0x1.0000000000000p+1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p+1 -0x1.0000000000000p+1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.45f306dc9c883p-3 0x1.45f306dc9c883p-3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.45f306dc9c883p-3 -0x1.45f306dc9c883p-3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.4000000000000p-1022 0x0.4000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.4000000000000p-1022 -0x0.4000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p+1022 -0x1.0000000000000p+1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+1022 0x1.0000000000000p+1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p+1 -0x1.0000000000000p+1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p+1 0x1.0000000000000p+1))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.45f306dc9c883p-3 -0x1.45f306dc9c883p-3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.45f306dc9c883p-3 0x1.45f306dc9c883p-3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.4000000000000p-1022 -0x0.4000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.4000000000000p-1022 0x0.4000000000000p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x1.921fb54442d18p+3 0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x1.921fb54442d18p+3 -0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.921fb54442d19p-1022 0x1.921fb54442d19p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.921fb54442d19p-1022 -0x1.921fb54442d19p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.921fb54442d18p+3 -0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.921fb54442d18p+3 0x1.921fb54442d18p+3))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.921fb54442d19p-1022 -0x1.921fb54442d19p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.921fb54442d19p-1022 0x1.921fb54442d19p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.45f306dc9c882p+1021 0x1.45f306dc9c882p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.45f306dc9c882p+1021 -0x1.45f306dc9c882p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.45f306dc9c882p+1021 -0x1.45f306dc9c882p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.45f306dc9c882p+1021 0x1.45f306dc9c882p+1021))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-52 0x1.0000000000000p-52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-52 -0x1.0000000000000p-52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0000000000002p-1022 0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.0000000000002p-1022 -0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-52 0x1.0000000000000p-52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-52 -0x1.0000000000000p-52))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 0x0.0000000000002p-1022 0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -0x0.0000000000002p-1022 -0x0.0000000000002p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 inf inf))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                   (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                   (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -inf -inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 inf inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                       (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan -nan)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0p+0 0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0p+0 0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x0p+0 -0x0p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x0p+0 -0x0p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1022 0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1022 0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1022 -0x1p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p-1 0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p-1 0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p-1 -0x1p-1)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1p+0 0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1p+0 0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1p+0 -0x1p+0)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 inf inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 inf inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -inf -inf)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -inf -inf)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.div" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)
                                                        (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x0p+0 0x0p+0))
                                    (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 -0x0p+0 -0x0p+0))
                                    (v128.const f64x2 -0x0p+0 -0x0p+0))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x1p-1022 0x1p-1022))
                                    (v128.const f64x2 0x1.0000000000000p-511 0x1.0000000000000p-511))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -0x1p-1022 -0x1p-1022)))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x1p-1 0x1p-1))
                                    (v128.const f64x2 0x1.6a09e667f3bcdp-1 0x1.6a09e667f3bcdp-1))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -0x1p-1 -0x1p-1)))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x1p+0 0x1p+0))
                                    (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -0x1p+0 -0x1p+0)))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                    (v128.const f64x2 0x1.40d931ff62705p+1 0x1.40d931ff62705p+1))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2)))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                    (v128.const f64x2 0x1.fffffffffffffp+511 0x1.fffffffffffffp+511))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023)))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                    (v128.const f64x2 0x1.0000000000000p-537 0x1.0000000000000p-537))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                    (v128.const f64x2 0x1.0000000000000p-537 0x1.0000000000000p-537))
(assert_return (invoke "f64x2.sqrt" (v128.const f64x2 inf inf))
                                    (v128.const f64x2 inf inf))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -inf -inf)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 nan nan)))
(assert_return_canonical_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -nan -nan)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000)))
(assert_return_arithmetic_nan_f64x2 (invoke "f64x2.sqrt" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000)))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x0p+0 0x0p+0))
                                   (v128.const f64x2 -0x0.0p+0 -0x0.0p+0))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -0x0p+0 -0x0p+0))
                                   (v128.const f64x2 0x0.0p+0 0x0.0p+0))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x1p-1022 0x1p-1022))
                                   (v128.const f64x2 -0x1.0000000000000p-1022 -0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -0x1p-1022 -0x1p-1022))
                                   (v128.const f64x2 0x1.0000000000000p-1022 0x1.0000000000000p-1022))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x1p-1 0x1p-1))
                                   (v128.const f64x2 -0x1.0000000000000p-1 -0x1.0000000000000p-1))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -0x1p-1 -0x1p-1))
                                   (v128.const f64x2 0x1.0000000000000p-1 0x1.0000000000000p-1))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x1p+0 0x1p+0))
                                   (v128.const f64x2 -0x1.0000000000000p+0 -0x1.0000000000000p+0))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -0x1p+0 -0x1p+0))
                                   (v128.const f64x2 0x1.0000000000000p+0 0x1.0000000000000p+0))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
                                   (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -0x1.921fb54442d18p+2 -0x1.921fb54442d18p+2))
                                   (v128.const f64x2 0x1.921fb54442d18p+2 0x1.921fb54442d18p+2))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -0x1.fffffffffffffp+1023 -0x1.fffffffffffffp+1023))
                                   (v128.const f64x2 0x1.fffffffffffffp+1023 0x1.fffffffffffffp+1023))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 0x0.0000000000001p-1022 0x0.0000000000001p-1022))
                                   (v128.const f64x2 -0x0.0000000000001p-1022 -0x0.0000000000001p-1022))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 inf inf))
                                   (v128.const f64x2 -inf -inf))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -inf -inf))
                                   (v128.const f64x2 inf inf))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 nan nan))
                                   (v128.const f64x2 -nan -nan))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -nan -nan))
                                   (v128.const f64x2 nan nan))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000))
                                   (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000))
(assert_return (invoke "f64x2.neg" (v128.const f64x2 -nan:0x4000000000000 -nan:0x4000000000000))
                                   (v128.const f64x2 nan:0x4000000000000 nan:0x4000000000000))

;; Mixed f64x2 tests when some lanes are NaNs
(module
  (type $v_v (func (param v128) (result v128)))
  (type $vv_v (func (param v128 v128) (result v128)))
  (table funcref (elem $64x2_neg $64x2_sqrt $64x2_add $64x2_sub $64x2_mul $64x2_div))

  (func $64x2_neg (type $v_v) (f64x2.neg (local.get 0)))
  (func $64x2_sqrt (type $v_v) (f64x2.sqrt (local.get 0)))
  (func $64x2_add (type $vv_v) (f64x2.add (local.get 0) (local.get 1)))
  (func $64x2_sub (type $vv_v) (f64x2.sub (local.get 0) (local.get 1)))
  (func $64x2_mul (type $vv_v) (f64x2.mul (local.get 0) (local.get 1)))
  (func $64x2_div (type $vv_v) (f64x2.div (local.get 0) (local.get 1)))

  (func (export "call_indirect_v_v_f64x2_extract_lane_0")
    (param v128 i32) (result f64)
      (f64x2.extract_lane 0
        (call_indirect (type $v_v) (local.get 0) (local.get 1))))
  (func (export "call_indirect_vv_v_f64x2_extract_lane_0")
    (param v128 v128 i32) (result f64)
      (f64x2.extract_lane 0
        (call_indirect (type $vv_v) (local.get 0) (local.get 1) (local.get 2))))
  (func (export "call_indirect_v_v_f64x2_extract_lane_1")
    (param v128 i32) (result f64)
      (f64x2.extract_lane 1
        (call_indirect (type $v_v) (local.get 0) (local.get 1))))
  (func (export "call_indirect_vv_v_f64x2_extract_lane_1")
    (param v128 v128 i32) (result f64)
      (f64x2.extract_lane 1
        (call_indirect (type $vv_v) (local.get 0) (local.get 1) (local.get 2))))
)
(assert_return_canonical_nan (invoke "call_indirect_v_v_f64x2_extract_lane_0" (v128.const f64x2 nan 1.0) (i32.const 0)))
(assert_return (invoke "call_indirect_v_v_f64x2_extract_lane_1" (v128.const f64x2 nan 1.0) (i32.const 0)) (f64.const -1.0))
(assert_return (invoke "call_indirect_v_v_f64x2_extract_lane_0" (v128.const f64x2 4.0 -nan) (i32.const 1)) (f64.const 2.0))
(assert_return_canonical_nan (invoke "call_indirect_v_v_f64x2_extract_lane_1" (v128.const f64x2 4.0 -nan) (i32.const 1)))
(assert_return_canonical_nan (invoke "call_indirect_vv_v_f64x2_extract_lane_0" (v128.const f64x2 nan 1.0) (v128.const f64x2 -1.0 1.0) (i32.const 2)))
(assert_return (invoke "call_indirect_vv_v_f64x2_extract_lane_1" (v128.const f64x2 nan 1.0) (v128.const f64x2 -1.0 1.0) (i32.const 2))  (f64.const 2.0))
(assert_return_canonical_nan (invoke "call_indirect_vv_v_f64x2_extract_lane_0" (v128.const f64x2 1.0 -1.0) (v128.const f64x2 -nan 1.0) (i32.const 3)))
(assert_return (invoke "call_indirect_vv_v_f64x2_extract_lane_1" (v128.const f64x2 1.0 -1.0) (v128.const f64x2 -nan 1.0) (i32.const 3))  (f64.const -2.0))
(assert_return_canonical_nan (invoke "call_indirect_vv_v_f64x2_extract_lane_0" (v128.const f64x2 1.0 2.0) (v128.const f64x2 nan 2.0) (i32.const 4)))
(assert_return (invoke "call_indirect_vv_v_f64x2_extract_lane_1" (v128.const f64x2 1.0 2.0) (v128.const f64x2 nan 2.0) (i32.const 4))  (f64.const 4.0))
(assert_return (invoke "call_indirect_vv_v_f64x2_extract_lane_0" (v128.const f64x2 6.0 nan) (v128.const f64x2 3.0 -nan) (i32.const 5))  (f64.const 2.0))
(assert_return_canonical_nan (invoke "call_indirect_vv_v_f64x2_extract_lane_1" (v128.const f64x2 6.0 nan) (v128.const f64x2 3.0 -nan) (i32.const 5)))

;; type check
(assert_invalid (module (func (result v128) (f64x2.neg (i64.const 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (f64x2.sqrt (i64.const 0)))) "type mismatch")
(assert_invalid (module (func (result v128) (f64x2.add (i64.const 0) (f64.const 0.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (f64x2.sub (i64.const 0) (f64.const 0.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (f64x2.mul (i64.const 0) (f64.const 0.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (f64x2.div (i64.const 0) (f64.const 0.0)))) "type mismatch")

;; combination
(module
  (func (export "add-sub") (param v128 v128 v128) (result v128)
    (f64x2.add (f64x2.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "div-add") (param v128 v128 v128) (result v128)
    (f64x2.div (f64x2.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "div-mul") (param v128 v128 v128) (result v128)
    (f64x2.div (f64x2.mul (local.get 0) (local.get 1))(local.get 2)))
  (func (export "div-sub") (param v128 v128 v128) (result v128)
    (f64x2.div (f64x2.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-add") (param v128 v128 v128) (result v128)
    (f64x2.mul (f64x2.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-div") (param v128 v128 v128) (result v128)
    (f64x2.mul (f64x2.div (local.get 0) (local.get 1))(local.get 2)))
  (func (export "mul-sub") (param v128 v128 v128) (result v128)
    (f64x2.mul (f64x2.sub (local.get 0) (local.get 1))(local.get 2)))
  (func (export "sub-add") (param v128 v128 v128) (result v128)
    (f64x2.sub (f64x2.add (local.get 0) (local.get 1))(local.get 2)))
  (func (export "add-neg") (param v128 v128) (result v128)
    (f64x2.add (f64x2.neg (local.get 0)) (local.get 1)))
  (func (export "add-sqrt") (param v128 v128) (result v128)
    (f64x2.add (f64x2.sqrt (local.get 0)) (local.get 1)))
  (func (export "div-neg") (param v128 v128) (result v128)
    (f64x2.div (f64x2.neg (local.get 0)) (local.get 1)))
  (func (export "div-sqrt") (param v128 v128) (result v128)
    (f64x2.div (f64x2.sqrt (local.get 0)) (local.get 1)))
  (func (export "mul-neg") (param v128 v128) (result v128)
    (f64x2.mul (f64x2.neg (local.get 0)) (local.get 1)))
  (func (export "mul-sqrt") (param v128 v128) (result v128)
    (f64x2.mul (f64x2.sqrt (local.get 0)) (local.get 1)))
  (func (export "sub-neg") (param v128 v128) (result v128)
    (f64x2.sub (f64x2.neg (local.get 0)) (local.get 1)))
  (func (export "sub-sqrt") (param v128 v128) (result v128)
    (f64x2.sub (f64x2.sqrt (local.get 0)) (local.get 1)))
)

(assert_return (invoke "add-sub" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.25 0.25)
                                 (v128.const f64x2 0.125 0.125))
                                 (v128.const f64x2 1.0 1.0))
(assert_return (invoke "div-add" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.125 0.125)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 5.0 5.0))
(assert_return (invoke "div-mul" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 4 4)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 18.0 18.0))
(assert_return (invoke "div-sub" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.125 0.125)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 4.0 4.0))
(assert_return (invoke "mul-add" (v128.const f64x2 1.25 1.25)
                                 (v128.const f64x2 0.25 0.25)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 0.375 0.375))
(assert_return (invoke "mul-div" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.125 0.125)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 2.25 2.25))
(assert_return (invoke "mul-sub" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.125 0.125)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 0.25 0.25))
(assert_return (invoke "sub-add" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.25 0.25)
                                 (v128.const f64x2 0.125 0.125))
                                 (v128.const f64x2 1.25 1.25))
(assert_return (invoke "add-neg" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.125 0.125))
                                 (v128.const f64x2 -1.0 -1.0))
(assert_return (invoke "add-sqrt" (v128.const f64x2 2.25 2.25)
                                  (v128.const f64x2 0.25 0.25))
                                  (v128.const f64x2 1.75 1.75))
(assert_return (invoke "div-neg" (v128.const f64x2 1.5 1.5)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 -6 -6))
(assert_return (invoke "div-sqrt" (v128.const f64x2 2.25 2.25)
                                  (v128.const f64x2 0.25 0.25))
                                  (v128.const f64x2 6 6))
(assert_return (invoke "mul-neg" (v128.const f64x2 1.5 1.5)
                                 (v128.const f64x2 0.25 0.25))
                                 (v128.const f64x2 -0.375 -0.375))
(assert_return (invoke "mul-sqrt" (v128.const f64x2 2.25 2.25)
                                  (v128.const f64x2 0.25 0.25))
                                  (v128.const f64x2 0.375 0.375))
(assert_return (invoke "sub-neg" (v128.const f64x2 1.125 1.125)
                                 (v128.const f64x2 0.125 0.125))
                                 (v128.const f64x2 -1.25 -1.25))
(assert_return (invoke "sub-sqrt" (v128.const f64x2 2.25 2.25)
                                  (v128.const f64x2 0.25 0.25))
                                  (v128.const f64x2 1.25 1.25))